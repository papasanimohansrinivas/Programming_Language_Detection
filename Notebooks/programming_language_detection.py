# -*- coding: utf-8 -*-
"""Programming_Language_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1swiYHiCzK70HhktrQjR4Wst7VnFXTxG8
"""

!git clone https://github.com/papasanimohansrinivas/Programming_Language_Detection.git master

import pandas

ls

cd master

"""#### If you dont use header = None option initially loading into dataframe is going to be a headache"""

t=pandas.read_csv("Programming_Data.csv",header=None)

t = t.sample(frac=1).reset_index(drop=True)

from collections import Counter

Counter(t['language'])

t.columns = ['code','language']

"""### Drop the nan rows from code columns 

#### reason i got nan into the csv is even mysterious to me ?
"""

import numpy as np

t=t[t.code!=np.nan]

def tokenize_the_code(column):
  
  import re

  pattern = r"""[\w']+|[""!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~""\\]"""
  
  try:
    
    return re.findall(pattern,column)
  
  except TypeError:
    
    return ""

t['code']=t['code'].apply(tokenize_the_code)

t=t[t['code']!=""]

"""### know the length of the programs by ploting the length of the programs"""

program_lengths = pandas.DataFrame(map(len,t['code']))

program_lengths.mean()

program_lengths.plot()

new_t=t[t['code'].map(len)<=500]

new_t.columns

df=pandas.DataFrame(map(np.array,new_t['code']))

from collections import Counter

df.head()

modified_df = pandas.get_dummies(df, columns=df.columns)

modified_df.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(modified_df, new_t['language'], test_size=0.33, random_state=42)

from sklearn.tree import DecisionTreeClassifier

dt=DecisionTreeClassifier(criterion='entropy', splitter='best')

dt.fit(X_train,y_train)

predictions = dt.predict(X_test)

def matchings(pred,test):
  
  count = 0
  
  for u,v in zip(pred,test):
    if u==v:
      count+=1
  
  print "matched predictions {asd} out of {total} accuracy is {acc}".format(asd=count,total=len(test),acc=((count+0.0)*100/(len(test))))

matchings(predictions,y_test)

X_train.head

